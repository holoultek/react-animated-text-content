{"version":3,"file":"react-animated-text-content.production.js","sources":["../src/helpers.ts","../src/styles/AnimatedFragment.styled.ts","../src/index.tsx"],"sourcesContent":["import { ReactText } from 'react';\nimport { WHITE_SPACE_CODE } from '.';\n\nexport const splitChildrenToFragments = (children: ReactText) =>\n  children.toString().split(' ');\n\nexport const concatFragments = (children: ReactText) => {\n  const splittedChildren = splitChildrenToFragments(children);\n\n  return ([] as string[])\n    .concat(\n      ...splittedChildren.map((word, index) =>\n        index !== 0 ? [WHITE_SPACE_CODE, word] : [word]\n      )\n    )\n    .map((word) => (word === ' ' ? WHITE_SPACE_CODE : word));\n};\n","import styled, { css } from 'styled-components';\nimport { AnimationShapeType } from '..';\n\nexport const AnimatedFragment = styled.span<{\n  count?: number;\n  interval?: number;\n}>`\n  position: relative;\n  display: inline-block;\n  visibility: hidden;\n`;\n\nexport const StyledWrapper = styled.div<{\n  uid: string;\n  count: number;\n  interval: number;\n  duration: number;\n  shouldAnimate: boolean;\n  animation: AnimationShapeType;\n}>`\n  @keyframes fragmentletter-${({ uid }) => uid} {\n    0% {\n      opacity: 0;\n      visibility: hidden;\n      transform: translateX(${({ animation: { x } }) => x ?? 0})\n        translateY(${({ animation: { y } }) => y ?? 0})\n        scale(${({ animation: { scale } }) => scale ?? 1});\n    }\n    100% {\n      oapcity: 1;\n      visibility: visible;\n      transform: translateX(0) translateY(0) scale(1);\n    }\n  }\n\n  & > span {\n    display: inline-block;\n  }\n\n  & ${AnimatedFragment} {\n    text-decoration: inherit;\n    vertical-align: inherit;\n\n    animation: ${({ animation: { ease }, duration }) =>\n      `${duration}s ${ease ?? 'ease-in-out'} forwards;`};\n\n    animation-name: ${({ shouldAnimate, uid }) =>\n      shouldAnimate ? `fragmentletter-${uid}` : ''};\n  }\n\n  ${({ count = 0, interval }) => {\n    let styles = '';\n\n    for (let i = 0; i < count; i += 1) {\n      styles += `${AnimatedFragment}:nth-of-type(${i + 1}) {\n            animation-delay: ${(interval || 0.04) * i}s;\n          }`;\n    }\n\n    return css`\n      ${styles}\n    `;\n  }}\n`;\n","import React, {\n  ElementType,\n  ReactText,\n  useEffect,\n  useState,\n  useRef,\n  FC,\n  ReactNode,\n} from 'react';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { concatFragments } from './helpers';\nimport {\n  AnimatedFragment,\n  StyledWrapper,\n} from './styles/AnimatedFragment.styled';\n\nexport interface AnimationShapeType {\n  x?: string;\n  y?: string;\n  scale?: number;\n  ease?: string;\n}\n\ntype AnimationType =\n  | 'blocks'\n  | 'wave'\n  | 'float'\n  | 'bounce'\n  | 'throw'\n  | 'diagonal'\n  | 'rifle'\n  | 'lights';\n\ninterface AnimatedTextProps {\n  type?: 'chars' | 'words';\n  children?: ReactText;\n  interval?: number;\n  duration?: number;\n  animation?: AnimationShapeType;\n  animationType?: AnimationType;\n  tag?: ElementType;\n  className?: string;\n  includeWhiteSpaces?: boolean;\n  threshold?: number;\n  rootMargin?: string;\n}\n\ninterface ExtendedAnimationShapeType extends AnimationShapeType {\n  duration?: number;\n  interval?: number;\n}\n\nconst PREDEFINED_ANIMATIONS: Record<AnimationType, ExtendedAnimationShapeType> =\n  {\n    blocks: {\n      y: '60px',\n      interval: 0.07,\n      duration: 0.7,\n    },\n    wave: {\n      y: '40px',\n      interval: 0.04,\n      duration: 0.4,\n      ease: 'ease-in-out',\n    },\n    float: {\n      x: '200px',\n      ease: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)',\n      duration: 1.2,\n      interval: 0.1,\n    },\n    bounce: { y: '200px', ease: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)' },\n    throw: {\n      y: '200px',\n      scale: 2,\n      interval: 0.07,\n    },\n    diagonal: {\n      x: '200px',\n      y: '-200px',\n      ease: 'cubic-bezier(0.68, -4.55, 0.265, 1.55)',\n    },\n    rifle: {\n      y: '100px',\n      x: '-500px',\n      ease: 'ease-in',\n      duration: 0.3,\n      interval: 0.03,\n    },\n    lights: {\n      y: '-20px',\n      ease: 'ease-out',\n      duration: 1,\n      interval: 0.4,\n    },\n  };\n\nexport const WHITE_SPACE_CODE = ' ';\nconst DEFAULT_INTERVAL = 0.04;\nconst DEFAULT_DURATION = 0.4;\nconst DEFAULT_TYPE = 'words';\nconst DEFAULT_ANIMATION = {\n  y: '-30px',\n};\nconst DEFAULT_TAG = 'div';\nconst DEFAULT_INTESECTION_OBSERVER_ROOT_MARGIN = '20%';\nconst DEFAULT_THRESHOLD = 0;\n\nconst renderWords = (\n  arrayToRender: string[],\n  includeWhiteSpaces: boolean\n): ReactNode =>\n  arrayToRender.map((fragment, index) =>\n    fragment !== WHITE_SPACE_CODE ? (\n      <AnimatedFragment\n        key={index}\n        dangerouslySetInnerHTML={{ __html: fragment }}\n      />\n    ) : (\n      (includeWhiteSpaces && (\n        <AnimatedFragment\n          key={`${index}&nbsp;`}\n          dangerouslySetInnerHTML={{ __html: '&nbsp;' }}\n        />\n      )) ||\n      WHITE_SPACE_CODE\n    )\n  );\n\nconst renderChars = (\n  arrayToRender: string[],\n  interval: number,\n  includeWhiteSpaces: boolean\n): ReactNode => {\n  let fullIndex = -1;\n\n  return arrayToRender.map((fragment, index) => {\n    const chars =\n      fragment !== WHITE_SPACE_CODE ? Array.from(fragment) : [WHITE_SPACE_CODE];\n\n    if (chars[0] !== WHITE_SPACE_CODE)\n      return (\n        <span key={index}>\n          {chars.map((char, charIndex) => {\n            fullIndex += 1;\n\n            return (\n              <AnimatedFragment\n                key={charIndex}\n                dangerouslySetInnerHTML={{ __html: char }}\n                style={{ animationDelay: `${interval * fullIndex}s` }}\n              />\n            );\n          })}\n        </span>\n      );\n\n    return includeWhiteSpaces ? (\n      <AnimatedFragment\n        key={`${index}&nbsp;`}\n        dangerouslySetInnerHTML={{ __html: '&nbsp;' }}\n        style={{ animationDelay: `${interval * fullIndex}s` }}\n      />\n    ) : (\n      WHITE_SPACE_CODE\n    );\n  });\n};\n\nconst AnimatedText: FC<AnimatedTextProps> = ({\n  children = '',\n  type = DEFAULT_TYPE,\n  interval,\n  duration,\n  animation = DEFAULT_ANIMATION,\n  animationType = DEFAULT_TYPE,\n  tag = DEFAULT_TAG,\n  includeWhiteSpaces = false,\n  rootMargin,\n  threshold,\n  ...props\n}) => {\n  const [arrayToRender, setArrayToRender] = useState<string[]>([]);\n  const [shouldAnimate, setShouldAnimate] = useState(false);\n  const wrapperRef = useRef(null);\n\n  const animationOptions = PREDEFINED_ANIMATIONS?.[animationType] ?? animation;\n\n  useEffect(() => {\n    if (typeof children !== 'string' && typeof children !== 'number') {\n      console.error(\n        \"Only string (ReactText) is currently allowed as react-animated-text-content component's child. Please, change to proper type.\"\n      );\n      return;\n    }\n\n    const concatedChildren = concatFragments(children);\n    setArrayToRender(concatedChildren);\n\n    const observer = new IntersectionObserver(\n      (entries, observer) => {\n        entries.forEach((entry) => {\n          if (!entry.isIntersecting) return;\n\n          setShouldAnimate(true);\n          if (wrapperRef.current) observer.unobserve(wrapperRef.current);\n        });\n      },\n      {\n        rootMargin: rootMargin || DEFAULT_INTESECTION_OBSERVER_ROOT_MARGIN,\n        threshold: threshold || DEFAULT_THRESHOLD,\n      }\n    );\n\n    if (wrapperRef.current) {\n      observer.observe(wrapperRef.current);\n    }\n\n    return () => {\n      setArrayToRender([]);\n      setShouldAnimate(false);\n    };\n  }, [children, type]);\n\n  const uid = uuidv4();\n\n  return (\n    <StyledWrapper\n      as={tag}\n      count={type === 'words' ? arrayToRender.length : 0}\n      interval={interval || (animationOptions?.interval ?? DEFAULT_INTERVAL)}\n      duration={duration || (animationOptions?.duration ?? DEFAULT_DURATION)}\n      ref={wrapperRef}\n      shouldAnimate={shouldAnimate}\n      uid={uid}\n      animation={animationOptions}\n      data-testid=\"animated-text\"\n      {...props}\n    >\n      {type === 'words'\n        ? renderWords(arrayToRender, includeWhiteSpaces)\n        : renderChars(\n            arrayToRender,\n            interval || (animationOptions?.interval ?? DEFAULT_INTERVAL),\n            includeWhiteSpaces\n          )}\n    </StyledWrapper>\n  );\n};\n\nexport default AnimatedText;\n"],"names":["AnimatedFragment","styled","span","templateObject_1","__makeTemplateObject","StyledWrapper","div","templateObject_3","_a","uid","x","animation","y","scale","ease","duration","concat","shouldAnimate","_b","count","interval","styles","i","css","templateObject_2","PREDEFINED_ANIMATIONS","blocks","wave","float","bounce","throw","diagonal","rifle","lights","WHITE_SPACE_CODE","DEFAULT_TYPE","DEFAULT_ANIMATION","exports","_f","children","_g","type","_h","_j","animationType","_k","tag","_l","includeWhiteSpaces","rootMargin","threshold","props","__rest","_m","useState","arrayToRender","setArrayToRender","_o","setShouldAnimate","wrapperRef","useRef","animationOptions","useEffect","concatedChildren","splittedChildren","toString","split","splitChildrenToFragments","apply","map","word","index","concatFragments","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","current","unobserve","observe","console","error","uuidv4","React","createElement","__assign","as","length","_c","_d","ref","fragment","key","dangerouslySetInnerHTML","__html","renderWords","fullIndex","chars","Array","from","char","charIndex","style","animationDelay","renderChars","_e","Object","defineProperty","value"],"mappings":"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"}